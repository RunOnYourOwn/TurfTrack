# Production Promtail config for TurfTrack
#
# - Set the 'clients.url' to your production Loki endpoint (e.g., https://loki.example.com:3100/loki/api/v1/push)
# - Adjust scrape configs, relabeling, and pipeline stages as needed for production
# - Review security, filtering, and performance settings before deploying

server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push  # <-- CHANGE THIS
    batchwait: 1s        # Wait 1s before sending batch
    batchsize: 1024      # Send max 1024 lines per batch
    timeout: 10s         # 10s timeout for requests

scrape_configs:
  - job_name: docker
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
    relabel_configs:
      - source_labels: [__meta_docker_container_name]
        regex: '/(.*)'
        target_label: container_name
      - source_labels: [__meta_docker_container_id]
        target_label: container_id
      - source_labels: [__meta_docker_container_label_com_docker_compose_service]
        target_label: compose_service
      - source_labels: [__meta_docker_container_label_com_docker_compose_project]
        target_label: compose_project
      - source_labels: [__meta_docker_container_label_com_docker_compose_container_number]
        target_label: compose_container_number
    pipeline_stages:
      # First, parse the entire log line as JSON
      - json:
          expressions:
            # Extract all fields from the JSON log
            timestamp: timestamp
            level: level
            name: name
            message: message
            # Performance metrics
            operation: operation
            duration_ms: duration_ms
            success: success
            event_type: event_type
            # Business events
            business_event: business_event
            lawn_id: lawn_id
            lawn_name: lawn_name
            location_id: location_id
            request_id: request_id
            # Frontend errors
            frontend_error: frontend_error
            error_message: error_message
            error_stack: error_stack
            url: url
            user_agent: user_agent
            component: component
            action: action
            # Frontend events
            frontend_event: frontend_event
            event_data: event_data
            # Request logging
            method: method
            path: path
            status_code: status_code
            response_time_ms: response_time_ms
            exception_type: exception_type
      # Add labels for important fields
      - labels:
          level:
          event_type:
          operation:

  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: varlogs
          __path__: /var/log/*log

    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z) (?P<level>\w+) (?P<message>.*)$'
      - timestamp:
          source: timestamp
          format: RFC3339Nano
      - labels:
          level: 