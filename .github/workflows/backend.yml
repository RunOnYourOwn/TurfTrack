name: Backend CI

on:
  push:
    paths:
      - "backend/**"
      - ".github/workflows/backend.yml"
  pull_request:
    paths:
      - "backend/**"
      - ".github/workflows/backend.yml"

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: turftrack_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test_user -d turftrack_test" --health-interval=5s --health-timeout=5s --health-retries=5
      redis:
        image: redis:7
        ports:
          - 6379:6379
    env:
      TEST_DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/turftrack_test
      TEST_REDIS_URL: redis://localhost:6379/1
      PYTHONUNBUFFERED: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Create virtual environment
        working-directory: backend
        run: |
          uv venv

      - name: Install dependencies
        working-directory: backend
        run: |
          uv pip install alembic asyncpg celery celery-redbeat factory-boy fastapi flower greenlet gunicorn httpx ipykernel openmeteo-requests pandas psycopg2-binary pydantic pydantic-settings pytest pytest-asyncio pytest-cov pytest-mock python-json-logger redis requests sqlalchemy uvicorn

      - name: Run tests (unit, integration, e2e)
        id: tests
        working-directory: backend
        env:
          DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
          REDIS_URL: ${{ env.TEST_REDIS_URL }}
          CELERY_BROKER_URL: ${{ env.TEST_REDIS_URL }}
          CELERY_RESULT_BACKEND: ${{ env.TEST_REDIS_URL }}
          REDBEAT_REDIS_URL: ${{ env.TEST_REDIS_URL }}
          ALEMBIC_DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        run: |
          uv run pytest --cov=app --cov-report=term-missing --cov-report=xml --cov-report=html:htmlcov --junitxml=pytest-report.xml

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: backend/.coverage

      - name: Publish Test Report
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: backend/pytest-report.xml

      - name: Publish Coverage Summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        if: always()
        with:
          filename: backend/coverage.xml
          badge: true
          format: "markdown"
          output: "both"

  coverage-badge:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: ./

      - name: Generate coverage badge
        uses: tj-actions/coverage-badge-py@v2
        with:
          output_path: "coverage-badge.svg"

      - name: Commit coverage badge
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: Update coverage badge"
          file_pattern: "coverage-badge.svg"
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          branch: main
