name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  test:
    name: Test Release Candidate
    runs-on: ubuntu-latest
    permissions:
      contents: read
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: turftrack_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test_user -d turftrack_test" --health-interval=5s --health-timeout=5s --health-retries=5
      redis:
        image: redis:7
        ports:
          - 6379:6379
    env:
      TEST_DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/turftrack_test
      TEST_REDIS_URL: redis://localhost:6379/1
      PYTHONUNBUFFERED: 1
      DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/turftrack_test
      REDIS_URL: redis://localhost:6379/0
      CELERY_BROKER_URL: redis://localhost:6379/0
      CELERY_RESULT_BACKEND: redis://localhost:6379/0
      REDBEAT_REDIS_URL: redis://localhost:6379/0
      ALEMBIC_DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/turftrack_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Create virtual environment
        working-directory: backend
        run: uv venv

      - name: Install dependencies
        working-directory: backend
        run: uv pip install -e .

      - name: Set up database
        working-directory: backend
        run: uv run alembic upgrade head

      - name: Run tests
        id: tests
        working-directory: backend
        run: uv run pytest

  build:
    name: Build Images
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ github.sha }}
          restore-keys: |
            buildx-

      - name: Build backend image (local)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile.prod
          platforms: linux/amd64
          load: true
          tags: turftrack-backend:ci
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Save backend image
        run: docker save turftrack-backend:ci -o backend-image.tar
      - name: Upload backend image
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: backend-image.tar

      - name: Build celery image (local)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile.celery
          platforms: linux/amd64
          load: true
          tags: turftrack-celery:ci
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Save celery image
        run: docker save turftrack-celery:ci -o celery-image.tar
      - name: Upload celery image
        uses: actions/upload-artifact@v4
        with:
          name: celery-image
          path: celery-image.tar

      - name: Build frontend image (local)
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          platforms: linux/amd64
          load: true
          tags: turftrack-frontend:ci
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Save frontend image
        run: docker save turftrack-frontend:ci -o frontend-image.tar
      - name: Upload frontend image
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image
          path: frontend-image.tar

  test-containers:
    name: Test Built Containers
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: turftrack_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test_user -d turftrack_test" --health-interval=5s --health-timeout=5s --health-retries=5
      redis:
        image: redis:7
        ports:
          - 6379:6379
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download backend image
        uses: actions/download-artifact@v4
        with:
          name: backend-image
      - name: Load backend image
        run: docker load -i backend-image.tar

      - name: Download celery image
        uses: actions/download-artifact@v4
        with:
          name: celery-image
      - name: Load celery image
        run: docker load -i celery-image.tar

      - name: Download frontend image
        uses: actions/download-artifact@v4
        with:
          name: frontend-image
      - name: Load frontend image
        run: docker load -i frontend-image.tar

      - name: Test Backend Container
        run: |
          docker run -d --name test-backend --network host \
            -e DATABASE_URL=postgresql+asyncpg://test_user:test_password@localhost:5432/turftrack_test \
            -e REDIS_URL=redis://localhost:6379/0 \
            -e CELERY_BROKER_URL=redis://localhost:6379/0 \
            -e CELERY_RESULT_BACKEND=redis://localhost:6379/0 \
            -e REDBEAT_REDIS_URL=redis://localhost:6379/0 \
            -e ALEMBIC_DATABASE_URL=postgresql+asyncpg://test_user:test_password@localhost:5432/turftrack_test \
            turftrack-backend:ci

          sleep 20

          echo "Backend container logs before health check:"
          docker logs test-backend || true

          echo "Running health check..."
          docker exec test-backend curl -v http://localhost:8000/health || echo "Health endpoint not available yet or returned error."

          echo "Backend container logs after health check:"
          docker logs test-backend || true

          docker stop test-backend
          docker rm test-backend

      - name: Test Frontend Container
        run: |
          docker run -d --name test-frontend turftrack-frontend:ci
          sleep 5
          docker ps | grep test-frontend
          docker stop test-frontend
          docker rm test-frontend

      - name: Security Scan Containers
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.48.0
          echo "Scanning backend image for vulnerabilities..."
          trivy image --severity HIGH,CRITICAL turftrack-backend:ci || echo "Vulnerabilities found in backend image"
          echo "Scanning frontend image for vulnerabilities..."
          trivy image --severity HIGH,CRITICAL turftrack-frontend:ci || echo "Vulnerabilities found in frontend image"

  publish:
    name: Publish Images
    needs: test-containers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile.prod
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/runonyourown/turftrack-backend:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Build and push celery image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile.celery
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/runonyourown/turftrack-celery:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/runonyourown/turftrack-frontend:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

  release:
    name: Create Draft Release
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create Draft Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            --draft \
            --generate-notes \
            --title "Release ${{ github.ref_name }}"
