# This is a standalone Docker Compose file for easy deployment of TurfTrack.
# It contains all necessary services to run the application in a production-like environment.
#
# Usage:
# 1. Make sure you have a .env file (you can copy .env.example).
# 2. Run 'docker-compose -f docker-compose.standalone.yml up -d'
#
# To update to a new version, change the version tag (e.g., :0.0.17) for the
# api, frontend, and celery images below.

services:
  # -----------------
  #  Core Services
  # -----------------
  db:
    image: postgres:16-alpine
    container_name: turftrack-db
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - turftrack_network

  redis:
    image: redis:7-alpine
    container_name: turftrack-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --loglevel notice
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - turftrack_network

  # ---------------------
  #  Application Services
  # ---------------------
  api:
    image: ghcr.io/runonyourown/turftrack-backend:latest
    container_name: turftrack-api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - ALEMBIC_DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDBEAT_REDIS_URL=redis://redis:6379/1
      - REDBEAT_LOCK_KEY=${REDBEAT_LOCK_KEY}
      - REDBEAT_LOCK_TIMEOUT=${REDBEAT_LOCK_TIMEOUT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - turftrack_network

  frontend:
    image: ghcr.io/runonyourown/turftrack-frontend:latest
    container_name: turftrack-frontend
    restart: unless-stopped
    ports:
      - "3000:3000" # Expose on port 3000 for web access
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${VITE_API_URL}
    depends_on:
      api:
        condition: service_started
    networks:
      - turftrack_network

  celery_worker:
    image: ghcr.io/runonyourown/turftrack-celery:latest
    container_name: turftrack-celery-worker
    restart: unless-stopped
    command: worker
    env_file:
      - .env
    environment:
      - CELERY_LOG_LEVEL=${CELERY_LOG_LEVEL:-INFO}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - ALEMBIC_DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDBEAT_REDIS_URL=redis://redis:6379/1
      - REDBEAT_LOCK_KEY=${REDBEAT_LOCK_KEY}
      - REDBEAT_LOCK_TIMEOUT=${REDBEAT_LOCK_TIMEOUT}
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - turftrack_network

  celery_beat:
    image: ghcr.io/runonyourown/turftrack-celery:latest
    container_name: turftrack-celery-beat
    restart: unless-stopped
    command: beat
    env_file:
      - .env
    environment:
      - CELERY_LOG_LEVEL=${CELERY_LOG_LEVEL:-INFO}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - ALEMBIC_DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - REDBEAT_REDIS_URL=redis://redis:6379/1
      - REDBEAT_LOCK_KEY=${REDBEAT_LOCK_KEY}
      - REDBEAT_LOCK_TIMEOUT=${REDBEAT_LOCK_TIMEOUT}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
      celery_worker:
        condition: service_started
      db:
        condition: service_healthy
    networks:
      - turftrack_network

volumes:
  postgres_data:
  redis_data:

networks:
  turftrack_network:
    driver: bridge
