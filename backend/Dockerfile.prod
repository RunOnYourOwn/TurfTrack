# --- Build Stage ---
FROM python:3.12-slim as builder

WORKDIR /app

# Set up a virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Download the uv binary, make it executable, and move it to a directory in the PATH
# This is the most direct and reliable method.
RUN apt-get update && apt-get install -y curl && \
    curl -L -o /tmp/uv-installer.sh https://astral.sh/uv/install.sh && \
    sh /tmp/uv-installer.sh && \
    mv /root/.local/bin/uv /usr/local/bin/uv && \
    chmod +x /usr/local/bin/uv && \
    # Clean up apt cache to keep image small
    rm -rf /var/lib/apt/lists/*

# Copy only dependency files from backend directory
COPY backend/pyproject.toml backend/uv.lock ./

# Use uv to install dependencies into the virtual environment
RUN uv pip install --python /opt/venv/bin/python --no-cache .

# --- Final Stage ---
FROM python:3.12-slim as final

WORKDIR /app

# Copy the virtual environment from the builder stage
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy the application code from backend directory
COPY backend/ .
# Copy the .env file from the project root
COPY .env .env

# Set Python to run in unbuffered mode
ENV PYTHONUNBUFFERED=1

# Expose the port the app runs on
EXPOSE 8000

# Run alembic migrations and start Gunicorn
CMD ["sh", "-c", "alembic upgrade head && gunicorn -k uvicorn.workers.UvicornWorker -w 4 -b 0.0.0.0:8000 main:app"] 